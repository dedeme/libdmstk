// Copyright 25-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

300 klen =
/// Int
/// Standard keys length.

2592000 tNoExpiration. = // seconds == 30 days

"nkXliX8lg2kTuQSS/OoLXCk8eS4Fwmc+N7l6TTNgzM1vdKewO0cjok51vcdl"
"OKVXyPu83xYhX6mDeDyzapxL3dIZuzwyemVw+uCNCZ01WDw82oninzp88Hef" +
"bn3pPnSMqEaP2bOdX+8yEe6sGkc3IO3e38+CqSOyDBxHCqfrZT2Sqn6SHWhR" +
"KqpJp4K96QqtVjmXwhVcST9l+u1XUPL6K9HQfEEGMGcToMGUrzNQxCzlg2g+" +
"Hg55i7iiKbA0ogENhEIFjMG+wmFDNzgjvDnNYOaPTQ7l4C8aaPsEfl3sugiw" + dmKey. =

{} data Cgi. =
/*
  fkey: String     // key to encrypt files
  key: Opt<String> // key to communications.
  home: String;
  tExpiration: Int
*/

( tExpiration =; home =

  this,Cgi.
    "fkey"        : this,dmKey. this,dmKey. size cryp,key : obj,put+
    "key"         : wrap,none : obj,put+
    "home"        : home : obj,put+
    "tExpiration" : tExpiration : obj,put

  (home file,mkdir) (home file,exists? !) if

  (
    [] data this,writeUsers.
    "admin" this,dmKey. "0" this,putUser.
    [] data this,writeSessions.
  )
  (home "users.db" path,+ file,exists? !) if
) init =>
/// (String, Int) -> Void

// Users -----------------------------------------------------------------------

( Users =  // (List<String>) -> Void
  this,Cgi. "home" obj,get : "users.db" : path,+
    Users (js,ws) lst,map js,wa : this,Cgi. "fkey" obj,get : cryp,cryp
      file,write
) writeUsers. =>

( // () -> List<String>
  this,Cgi. "home" obj,get : "users.db" : path,+
  file,read
    this,Cgi. "fkey" obj,get cryp,decryp
    js,ra
    (js,rs) lst,map
) readUsers. =>

( id =; Users =  // (List<String>, String) -> Void
  Users (u =; u ":" str,split 0 get id ==) lst,index : ix =
  (Users ix lst,remove) (ix -1 !=) if
) removeUser. =>

( level =; key =; id =  // (String, String, String) -> Void
  this,readUsers. Users =
  Users id this,removeUser.
  Users
    id : ":" : key this,klen cryp,key : ":" : level + + + + lst,push+
    this,writeUsers.
) putUser. =>

( id =   // (String) -> Void
  this,readUsers.
  dup id this,removeUser.
  this,writeUsers.
) delUser. =>

( key =; id =   // (String, String) -> Opt<String>  Returns user level
  key this,klen cryp,key : kkey =
  this,readUsers. : Users =

  ( wrap,none)
  ( ":" str,split Fields =;
    (wrap,none) else (Fields 2 get wrap,some) (Fields 1 get kkey ==) if
  )
  ( Users (":" str,split 0 get id ==) lst,find)
  wrap,option
) checkUser. =>

( level =; id =   // (String, String) -> Int
  [0] data : Changed =
  this,readUsers.
    ( u =;
      u ":" str,split : Ds =;

      (u)
      else
      (
        Changed 1 <<
        Ds 0 get : ":" : Ds 1 get : ":" : level + + + +
      )
      (Ds 0 get id ==)
      if
    )
    lst,map this,writeUsers.
  Changed >>
) changeLevel. =>

( newPass =; oldPass =; id =  // (String, String, String) -> Int
  newPass this,klen cryp,key : newPassK =
  oldPass this,klen cryp,key : oldPassK =

  [0] data : Changed =
  this,readUsers.
    ( u =;
      u ":" str,split : Ds =;

      ( u)
      else
      (
        Changed 1 <<
        Ds 0 get : ":" : newPassK : ":" : Ds 2 get : + + + +
      )
      (Ds 0 get id == : Ds 1 get oldPassK == : &&)
      if
    )
    lst,map this,writeUsers.
  Changed >>
) changePass. =>

// Sessions --------------------------------------------------------------------

( Sessions =  // (List<Js>) -> Void  . Js is a JSON array
  this,Cgi. "home" obj,get : "sessions.db" : path,+
    Sessions js,wa : this,Cgi. "fkey" obj,get : cryp,cryp
  file,write
) writeSessions. =>

(   // () -> List<Js>. Js is a JSON array
  this,Cgi. "home" obj,get : "sessions.db" : path,+
  file,read : this,Cgi. "fkey" obj,get : cryp,decryp : js,ra
) readSessions. =>

( expiration =; comKey =; id =; sessionId =
    // (String, String, String, Int) -> Void
    // If expiration is 0 tNoExpiration is used
  (this,tNoExpiration.) else (expiration) (expiration) if : lapse =
  time,now lapse time,add : tm =

  this,readSessions.
    [
      sessionId js,ws // 0
      user js,ws      // 1
      comKey js,ws    // 2
      "" js,ws        // 3 conId
      tm js,wi        // 4
      lapse js,wi     // 5
    ] data js,wa lst,push+
    this,writeSessions.
) addSession. =>

( sessionId =   // (String) -> Void
  this,readSessions.
    (js,ra 0 get js,rs : sessionId : !=) lst,filter this,writeSessions.
) delSession. =>

( conId =; sessionId =   // (String, String) -> Void
  this,readSessions.
    ( SsJs =
      SsJs js,ra Ss =

      ( SsJs)
      else
      ( Ss : 3 : conId js,ws : set+; js,wa)
      ( Ss 0 get js,rs : sessionId : ==)
      if
    ) lst,map this,writeSessions.
) setConnectionId. =>

// Public interface ------------------------------------------------------------

( this,Cgi. "home" obj,get)
home =>
/// () -> String
/// Returns 'home' directory.

( k =;
  this,Cgi. : "key" : k wrap,some : obj,put
) setKey =>
/// (String) -> Void
/// Sets the key which 'cgi ok' and 'cgi err' will use. This function is called
/// when connection or authentication.

( sessionId =
  sessionId this,klen cryp,genk this,setConnectionId.
  (
    {
      "key": "" js,ws
      "connectionId": "" js,ws
    } data
  )
  ( )
  (sessionId this,getSession)
  wrap,option
  this,ok
) connect =>
/// (String) -> String
/// Returns client 'connectionId' and 'key'. If conection failed both are "".
///   session_id: Session identifier.
///   return    : JSON: {connectionId: String, key: String}.
///               'key' is a new key, set for the new connection.

( expiration =; key =; user =
  (
    {
      "level": "" js,ws
      "sessionId": "" js,ws
      "key": "" js,ws
    } data
  )
  ( level =
    this,klen cryp,genk : sessionId =
    this,klen cryp,genk : key =
    sessionId : user : key
      (0) else (this,Cgi. "tExpiration" obj,get) (expiration) if
      this,addSession.
    {
      "level": level js,ws
      "sessionId": sessionId js,ws
      "key": key js,ws
    } data
  )
  (user key this,checkUser.)
  wrap,option
  this,ok
) authentication =>
/// (String, String, Int) -> String
/// Sends to client level, key, page_id and session_id.
/// If authentication failed every value is "".
///   user      : User name.
///   key       : User password.
///   expiration: If is set to 0, session will expire after 30 days.
///   return    : JSON: {level: String, key: String, sessionId: String}

( sessionId =
  time,now : now =

  this,readSessions.
    (js,ra 4 get js,ri : now : >=) lst,filter
    ( SsJs =
      SsJs js,ra Ss =

      ( SsJs)
      else
      (
        Ss 5 get : js,ri : lapse =
        Ss : 4 : time,now lapse time,add js,wi : set+
        js,wa
      )
      ( Ss 0 get js,rs : sessionId : ==)
      if
    ) lst,map : Sessions =

  Sessions this,writeSessions.

  ( wrap,none)
  ( Ss =
    {
      "key": Ss js,ra 2 get
      "conId": Ss js,ra 3 get
    } data wrap,some
  )
  ( Sessions (js,ra 0 get js,rs : sessionId : ==) lst,find)
  wrap,option
) getSession =>
/// String -> Opt<Obj {key: Js, conId: Js}>
///   sesionId: Session identifier.
///   return  : Option with communication key and connection identifier.

( sessionId =
  this,readSessions.
    (js,ra 0 get js,rs : sessionId : !=) lst,filter
    this,writeSessions.
    this,none
) delSession =>
/// String -> JSON: {}
/// Deletes 'sessionId' and returns an empty response.

( level =; ukey =; user =; akey =; admin =
  {} "ok"
    ( 0)
    ( (0) else (user ukey level putUser.; 1) ("0" ==) if)
    ( admin akey checkUser.)
    wrap,option
    js.wb obj,put+ this,ok
) addUser =>

( user =; akey =; admin =
  {} "ok"
    ( 0)
    ( (0) else (user delUser.; 1) ("0" ==) if)
    ( admin akey checkUser.)
    wrap,option
    js.wb obj,put+ this,ok
) delUser =>

( level =;user =; akey =; admin =
  {} "ok"
    ( 0)
    ( (0) else (user level changeLevel.; 1) ("0" ==) if)
    ( admin akey checkUser.)
    wrap,option
    js.wb obj,put+ this,ok
) changeLevel =>

( this,changePass. r =; {} "ok" r js,wb obj,put+ this,ok)
changePass =>
/// (String, String, String) -> JSON: {ok: Boolean}
/// Changes user password.
///   user   : User name to change password.
///   key    : Old password.
///   new_key: New password.
///   return : JSON: {ok:true|false}, sets to true if operation
///            succeeded. A fail can come up if 'user' authentication fails.

(
  js,wo
    (pop "Cgi->key is not set")
    (cryp,cryp)
    (this,Cgi. "key" obj,get)
    wrap,option
) ok =>
/// (Map<JSON>) -> String

(
  {} this,ok
) none =>
/// () -> String

( msg =
  { "error": msg js,ws } data this,ok
) error =>
/// (String) -> String

(
  { "expired": 1 js,wb } data this,ok
) expired =>
/// () -> String
